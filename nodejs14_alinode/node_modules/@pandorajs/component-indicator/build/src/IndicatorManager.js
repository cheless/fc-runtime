"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndicatorManager = void 0;
const IndicatorUtil_1 = require("./IndicatorUtil");
const IndicatorManagerProxy_1 = require("./IndicatorManagerProxy");
const PID = process.pid.toString();
class IndicatorManager {
    constructor(ctx) {
        this.store = new Map();
        this.ctx = ctx;
        this.proxy = new IndicatorManagerProxy_1.IndicatorManagerProxy(this);
    }
    register(indicator) {
        const { group } = indicator;
        if (!this.store.has(group)) {
            this.store.set(group, []);
        }
        const list = this.store.get(group);
        list.push(indicator);
    }
    get(group) {
        return this.store.get(group);
    }
    async invokeRaw(group, query = {}) {
        const indicators = this.store.get(group);
        if (!indicators) {
            throw new Error('No such indicators with group: ' + group);
        }
        const ret = [];
        for (const indicator of indicators) {
            const { scope, key } = indicator;
            if ((query.key && key !== query.key) ||
                (query.scope && scope !== query.scope)) {
                continue;
            }
            const data = await indicator.invoke(query);
            ret.push({
                group,
                key,
                data,
                scope,
                pid: PID,
                appName: this.ctx.appName,
            });
        }
        return ret;
    }
    async invoke(group, query = {}) {
        const rawRows = await this.invokeRaw(group, query);
        return IndicatorUtil_1.IndicatorUtil.mergeRawIndicatorResultRows(rawRows);
    }
    async invokeAllProcessesRaw(group, query = {}) {
        const selectors = {
            appName: query.appName,
            pid: query.pid,
        };
        const hubFacade = this.ctx.hubFacade;
        const consumer = hubFacade.getConsumer({
            name: IndicatorManagerProxy_1.IndicatorManagerProxy.SERVICE_NAME_AT_IPC_HUB,
        });
        const batchRows = await consumer.multipleInvoke('overProcessCallHandle', [group, query], selectors);
        let ret = [];
        for (const row of batchRows) {
            ret = ret.concat(row.data);
        }
        return ret;
    }
    async invokeAllProcesses(group, query = {}) {
        const rawRows = await this.invokeAllProcessesRaw(group, query);
        return IndicatorUtil_1.IndicatorUtil.mergeRawIndicatorResultRows(rawRows);
    }
    async publish() {
        const hubFacade = this.ctx.hubFacade;
        await hubFacade.publish(this.proxy, {
            name: IndicatorManagerProxy_1.IndicatorManagerProxy.SERVICE_NAME_AT_IPC_HUB,
        });
    }
}
exports.IndicatorManager = IndicatorManager;
//# sourceMappingURL=IndicatorManager.js.map