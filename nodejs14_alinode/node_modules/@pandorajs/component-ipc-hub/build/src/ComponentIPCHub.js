"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const component_decorator_1 = require("@pandorajs/component-decorator");
const hub_1 = require("@pandorajs/hub");
const dollar_1 = require("@pandorajs/dollar");
let ComponentIPCHub = class ComponentIPCHub {
    constructor(ctx) {
        this.ctx = ctx;
        if (ctx.mode === 'supervisor') {
            this.hubServer = new hub_1.HubServer();
            ctx.hubServer = this.hubServer;
        }
        this.hubFacade = new hub_1.HubFacade();
        ctx.hubFacade = this.hubFacade;
    }
    async startAtSupervisor() {
        await this.hubServer.start();
        dollar_1.consoleLogger.info('IPC Hub Server started');
        await this.startClient();
        try {
            await this.hubFacade.initConfigManager();
        }
        catch (err) {
            dollar_1.consoleLogger.warn('IPC Hub init ConfigManager failed at PID ' + process.pid + ', ' + err);
        }
    }
    async start() {
        await this.startClient();
        try {
            await this.hubFacade.initConfigClient();
        }
        catch (err) {
            dollar_1.consoleLogger.warn('IPC Hub init ConfigClient failed at PID ' + process.pid + ', ' + err);
        }
    }
    async startClient() {
        const { appName, processName } = this.ctx;
        this.hubFacade.setup({
            location: {
                appName: appName,
                processName: processName,
                pid: process.pid.toString(),
            },
            logger: dollar_1.consoleLogger,
        });
        try {
            await this.hubFacade.start();
            dollar_1.consoleLogger.info('IPC Hub Client started at PID ' + process.pid);
        }
        catch (err) {
            dollar_1.consoleLogger.warn('IPC Hub Client start failed at PID ' + process.pid + ', ' + err);
        }
    }
    async stop() {
        await this.hubFacade.stop();
    }
    async stopAtSupervisor() {
        await this.hubFacade.stop();
        await this.hubServer.stop();
    }
};
ComponentIPCHub = __decorate([
    component_decorator_1.componentName('ipcHub')
], ComponentIPCHub);
exports.default = ComponentIPCHub;
//# sourceMappingURL=ComponentIPCHub.js.map