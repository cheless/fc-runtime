import { DispatchHandler, Introspection, ObjectMessage, SubscribeMessage } from '../types';
import { ProviderManager } from './ProviderManager';
import { ObjectProxyBehaviourManager } from './ObjectProxyBehaviourManager';
/**
 * ObjectDispatchHandler
 * Handle actions of Object Proxying
 */
export declare class ObjectDispatchHandler implements DispatchHandler {
    protected objectManager: ProviderManager;
    protected objectProxyBehaviourManager: ObjectProxyBehaviourManager;
    constructor(objectManager: ProviderManager);
    /**
     * Handle actions of Object Proxying
     * @param {ObjectMessage} message
     * @return {Promise<any>}
     */
    dispatch(message: ObjectMessage & SubscribeMessage): Promise<any>;
    /**
     * Handle action OBJECT_ACTION_INVOKE
     * @param {ObjectMessage} message
     * @return {Promise<any>}
     */
    invoke(message: ObjectMessage): Promise<any>;
    /**
     * Handle action OBJECT_ACTION_GET_PROPERTY
     * @param {ObjectMessage} message
     * @return {Promise<any>}
     */
    private getProperty;
    /**
     * Handle action OBJECT_ACTION_SUBSCRIBE
     * @param {SubscribeMessage} message
     * @return {Promise<any>}
     */
    subscribe(message: SubscribeMessage): Promise<void>;
    /**
     * Handle action OBJECT_ACTION_UNSUBSCRIBE
     * @param {SubscribeMessage} message
     * @return {Promise<any>}
     */
    unsubscribe(message: SubscribeMessage): Promise<void>;
    /**
     * Handle action OBJECT_ACTION_INTROSPECT
     * @param {ObjectMessage} message
     * @return {Introspection}
     */
    introspect(message: ObjectMessage): Introspection;
}
//# sourceMappingURL=ObjectDispatchHandler.d.ts.map