"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractInt = exports.startsWith = exports.avoidLogger = exports.consoleLogger = exports.MyConsole = exports.resolveSymlink = exports.makeRequire = exports.promise = void 0;
const path_1 = require("path");
const fs_1 = require("fs");
const module_1 = require("./module");
const colors = require("colors");
exports.promise = {
    fromCallback(cb) {
        return new Promise((resolve, reject) => {
            cb(e => {
                if (e) {
                    return reject(e);
                }
                resolve();
            });
        });
    },
    delay(ms) {
        return new Promise(resolve => {
            setTimeout(resolve, ms);
        });
    },
    defer() {
        let resolve, reject;
        const promise = new Promise((_resolve, _reject) => {
            resolve = _resolve;
            reject = _reject;
        });
        return {
            resolve: resolve,
            reject: reject,
            promise: promise,
        };
    },
};
function makeRequire(dir) {
    if (!module_1.Module._extensions['.$requireAnyWhere']) {
        module_1.Module._extensions['.$requireAnyWhere'] = () => { };
    }
    const fakePath = path_1.join(dir, 'pandora.$requireAnyWhere');
    const fakeModule = new module_1.Module(fakePath);
    fakeModule.load(fakePath);
    return fakeModule.require.bind(fakeModule);
}
exports.makeRequire = makeRequire;
function resolveSymlink(targetPath) {
    if (fs_1.lstatSync(targetPath).isSymbolicLink()) {
        const linkTo = path_1.join(path_1.dirname(targetPath), fs_1.readlinkSync(targetPath));
        return resolveSymlink(linkTo);
    }
    return targetPath;
}
exports.resolveSymlink = resolveSymlink;
class MyConsole extends console.Console {
    constructor() {
        super(process.stdout, process.stderr);
    }
    important(msg, ...more) {
        super.log(colors.green(`[Pandora.js] ** ${msg} **`), ...more);
    }
    error(msg, ...more) {
        super.error(colors.red(`[Pandora.js] ${msg}`), ...more);
        if (msg.stack) {
            super.error(colors.red(msg.stack), ...more);
        }
    }
    warn(msg, ...more) {
        super.warn(colors.yellow(`[Pandora.js] ${msg}`), ...more);
    }
    info(msg, ...more) {
        super.info(colors.cyan(`[Pandora.js] ${msg}`), ...more);
    }
}
exports.MyConsole = MyConsole;
exports.consoleLogger = new MyConsole();
exports.avoidLogger = {
    log() { },
    warn() { },
    error() { },
    info() { },
    important() { },
};
function startsWith(str, target, position = 0) {
    const { length } = str;
    if (position < 0) {
        position = 0;
    }
    else if (position > length) {
        position = length;
    }
    target = `${target}`;
    return str.slice(position, position + target.length) === target;
}
exports.startsWith = startsWith;
function extractInt(str) {
    try {
        return parseInt(str.match(/\d+/g)[0], 10);
    }
    catch (e) {
        return null;
    }
}
exports.extractInt = extractInt;
//# sourceMappingURL=index.js.map