"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessInfoIndicator = void 0;
const pusage = require("pidusage");
const component_indicator_1 = require("@pandorajs/component-indicator");
class ProcessInfoIndicator {
    constructor(ctx) {
        this.group = 'process';
        this.scope = component_indicator_1.IndicatorScope.PROCESS;
        this.ctx = ctx;
    }
    async invoke(query) {
        let stat;
        try {
            stat = await new Promise((resolve, reject) => {
                pusage.stat(process.pid, (err, stat) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(stat);
                    }
                });
            });
        }
        catch (err) {
            stat = this.tryGetCpuAndMem() || {};
        }
        return {
            v: 2,
            processName: this.ctx.processName,
            // eslint-disable-next-line node/no-unsupported-features/node-builtins
            ppid: process.ppid,
            pid: process.pid,
            title: process.title,
            argv: process.__pandoraOriginArgv || process.argv,
            execArgv: process.execArgv,
            debugPort: process.debugPort,
            inspectorUrl: ProcessInfoIndicator.getInspectorUrl(),
            execPath: process.execPath,
            cpu: stat.cpu,
            memory: stat.memory,
            uptime: process.uptime(),
        };
    }
    tryGetCpuAndMem() {
        if (process.cpuUsage) {
            return {
                cpu: process.cpuUsage(),
                memory: process.memoryUsage(),
            };
        }
    }
    static getInspectorUrl() {
        try {
            // eslint-disable-next-line node/no-unsupported-features/node-builtins
            return require('inspector').url();
        }
        catch (err) {
            return null;
        }
    }
}
exports.ProcessInfoIndicator = ProcessInfoIndicator;
//# sourceMappingURL=ProcessIndicator.js.map